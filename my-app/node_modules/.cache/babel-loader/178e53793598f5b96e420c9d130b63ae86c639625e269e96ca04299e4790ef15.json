{"ast":null,"code":"import { configureStore, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { TMDB_BASE_URL, API_KEY } from \"../utils/constants\";\nconst initialState = {\n  movies: [],\n  genresLoaded: false,\n  genres: []\n};\nconst createArrayFromRawData = (array, moviesArray, genres) => {\n  array.forEach(movie => {\n    const movieGenres = [];\n    movie.genre_ids.forEach(genre => {\n      const name = genres.find(_ref => {\n        let {\n          id\n        } = _ref;\n        return id === genre;\n      });\n      if (name) movieGenres.push(name.name);\n    });\n    if (movie.backdrop_path) {\n      moviesArray.push({\n        id: movie.id,\n        name: movie !== null && movie !== void 0 && movie.original_name ? movie.original_name : movie.original_title,\n        image: movie.backdrop_path,\n        genres: movieGenres.slice(0, 3)\n      });\n    }\n  });\n};\nconst getRawData = async (api, genres, paging) => {\n  const moviesArray = [];\n  for (let i = 1; moviesArray.length < 60 && i < 10; i++) {\n    const {\n      data: results\n    } = await axios.get(`${api}${paging ? `&page=${i}` : \"\"}`, createArrayFromRawData(results, moviesArray, genres));\n    return moviesArray;\n  }\n};\nexport const fetchMovies = createAsyncThunk(\"cinera/trending\", async (_ref2, thunkApi) => {\n  let {\n    type\n  } = _ref2;\n  const {\n    cinera: {\n      genres\n    }\n  } = thunkApi.getState();\n  const data = getRawData(`${TMDB_BASE_URL}/trending/${type}/week?api_key=${API_KEY}`, genres, true);\n});\nexport const getGenres = createAsyncThunk(\"cinera/genres\", async () => {\n  const {\n    data: {\n      genres\n    }\n  } = await axios.get(`${TMDB_BASE_URL}/genre/movie/list?api_key=${API_KEY}`);\n  return genres;\n});\nconst CineraSlice = createSlice({\n  name: \"Cinera\",\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(getGenres.fulfilled, (state, action) => {\n      state.genres = action.payload;\n      state.genresLoaded = true;\n    });\n  }\n});\nexport const store = configureStore({\n  reducer: {\n    cinera: CineraSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createAsyncThunk","createSlice","axios","TMDB_BASE_URL","API_KEY","initialState","movies","genresLoaded","genres","createArrayFromRawData","array","moviesArray","forEach","movie","movieGenres","genre_ids","genre","name","find","id","push","backdrop_path","original_name","original_title","image","slice","getRawData","api","paging","i","length","data","results","get","fetchMovies","thunkApi","type","cinera","getState","getGenres","CineraSlice","extraReducers","builder","addCase","fulfilled","state","action","payload","store","reducer"],"sources":["/Users/soumitabasu/Documents/Cinera-Website/my-app/src/store/index.js"],"sourcesContent":["import{\n    configureStore,\n    createAsyncThunk,\n    createSlice,\n} from \"@reduxjs/toolkit\";\n\nimport axios from \"axios\";\nimport {TMDB_BASE_URL, API_KEY} from \"../utils/constants\";\n\nconst initialState = {\n    movies: [],\n    genresLoaded: false,\n    genres: [],\n};\n\nconst createArrayFromRawData = (array,moviesArray,genres) => {\n    array.forEach((movie) => {\n        const movieGenres = [];\n        movie.genre_ids.forEach((genre) => {\n            const name = genres.find(({id}) => id === genre);\n            if(name) movieGenres.push(name.name);\n        })\n        if(movie.backdrop_path){\n            moviesArray.push({\n                id: movie.id,\n                name: movie?.original_name ? movie.original_name : movie.original_title,\n                image: movie.backdrop_path,\n                genres: movieGenres.slice(0,3),\n            })\n        }\n    })\n}\n\nconst getRawData = async (api, genres, paging) => {\n    const moviesArray = [];\n    for(let i=1;moviesArray.length < 60 && i<10;i++){\n        const {data: results} = await axios.get(\n            `${api}${paging ? `&page=${i}` : \"\"}`,\n            createArrayFromRawData(results,moviesArray,genres)\n            );\n            return moviesArray;\n    }\n}\n\nexport const fetchMovies = createAsyncThunk(\n    \"cinera/trending\",\n    async({type}, thunkApi) =>{\n    const {\n        cinera: {genres},\n    } = thunkApi.getState();\n    const data = getRawData(`${TMDB_BASE_URL}/trending/${type}/week?api_key=${API_KEY}`,\n    genres,\n    true\n    );\n});\n\nexport const getGenres = createAsyncThunk(\"cinera/genres\", async() => {\n    const {\n        data: {genres},\n    } = await axios.get((`${TMDB_BASE_URL}/genre/movie/list?api_key=${API_KEY}`));\n    return genres;\n})\n\nconst CineraSlice = createSlice({\n    name: \"Cinera\",\n    initialState,\n    extraReducers: (builder) => {\n        builder.addCase(getGenres.fulfilled,(state, action) =>{\n        state.genres = action.payload;\n        state.genresLoaded = true;\n        })\n    },\n});\n\nexport const store = configureStore({\n    reducer: {\n        cinera: CineraSlice.reducer,\n    },\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}